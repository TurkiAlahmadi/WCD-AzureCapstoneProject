{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-cp2"
		},
		"ls_my_blob_strg_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_my_blob_strg'",
			"defaultValue": "DefaultEndpointsProtocol=https;AccountName=cp2dl;EndpointSuffix=core.windows.net;"
		},
		"ls_wcd_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_wcd_blob'",
			"defaultValue": "DefaultEndpointsProtocol=https;AccountName=wcddestorageexternal;"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://cp2kv.vault.azure.net/"
		},
		"ls_adb_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0507-090224-vb52glii"
		},
		"ls_rds_pg_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "de-rds.czm23kqmbd6o.ca-central-1.rds.amazonaws.com"
		},
		"ls_rds_pg_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "stack"
		},
		"ls_rds_pg_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "postgres"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/copyOnceWeek')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy PostTypes and Users tables from RDS PostgreSQL DB once a week",
				"activities": [
					{
						"name": "Copy postTypes",
						"description": "Copy postTypes from RDS PostgreSQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_postTypes",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_postTypes_load_rds_to_myblob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Users",
						"description": "Copy Users from RDS PostgreSQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_Users_load_rds_to_myblob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Retry Copy Users",
						"description": "Executes a set of activities in a loop to reattempt copying data for a specific duration.",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Copy Users",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('UserFileCopied')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "User File Existence Check",
									"description": "Check that the file is copied",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_Users_load_rds_to_myblob",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Users Conditional Action",
									"description": "Make an action depending on post files existence",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "User File Existence Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('User File Existence Check').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Users Retry WaitTime",
												"description": "Set the time till the next copy retry attempt",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1800
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set UserFileCopied",
												"description": "Set the UserFileCopied pipeline variable to true indicating successful copy attempt",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UserFileCopied",
													"value": {
														"value": "@bool(true)",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							],
							"timeout": "0.01:15:00"
						}
					},
					{
						"name": "Retry Copy postTypes",
						"description": "Executes a set of activities in a loop to reattempt copying data for a specific duration.",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Copy postTypes",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('PostTypeFileCopied')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "PostType File Existence Check",
									"description": "Check that the file is copied",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_postTypes_load_rds_to_myblob",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "PostTypes Conditional Action",
									"description": "Make an action depending on post files existence",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "PostType File Existence Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('PostType File Existence Check').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "PostTypes Retry WaitTime",
												"description": "Set the time till the next copy retry attempt",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1800
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set PostTypeFileCopied",
												"description": "Set the PostTypeFileCopied pipeline variable to true indicating successful copy attempt",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "PostTypeFileCopied",
													"value": {
														"value": "@bool(true)",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							],
							"timeout": "0.01:15:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"PostTypeFileCopied": {
						"type": "Boolean",
						"defaultValue": false
					},
					"UserFileCopied": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "adf-pipeliens"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_postTypes')]",
				"[concat(variables('factoryId'), '/datasets/ds_postTypes_load_rds_to_myblob')]",
				"[concat(variables('factoryId'), '/datasets/ds_Users')]",
				"[concat(variables('factoryId'), '/datasets/ds_Users_load_rds_to_myblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyPostsDaily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy Posts parquet files daily from an external Azure blob storage container",
				"activities": [
					{
						"name": "Retry Loop",
						"description": "Executes a set of activities in a loop for a specific duration.",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('FilesCopied')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Posts Conditional Action",
									"description": "Make an action depending on post files existence",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy Posts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Copy Posts').output.filesWritten, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set FilesCopied",
												"description": "Set the pipeline variable to true indicating successful copy attempt",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "FilesCopied",
													"value": {
														"value": "@bool(true)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Retry WaitTime",
												"description": "Set the time till the next copy retry attempt",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 60
												}
											}
										]
									}
								},
								{
									"name": "Copy Posts",
									"description": "Copy posts from an external Azure blob storage",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": "*.parquet",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "TestPipeline",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_Posts_load_wcdblob_to_myblob",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"timeout": "0.00:5:00"
						}
					},
					{
						"name": "Check FilesCopied",
						"description": "Check if files are not copied at this point, then trigger a fail activity if so",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Retry Loop",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('FilesCopied')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy Files Failure",
									"description": "A fail activity associated with the status of copying files from source",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Post files were not copied from source",
										"errorCode": "CopyError"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ML Post Classification",
									"description": "An Azure Databricks notebook to classify post tags with a logistic regression model",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Shared/01 Model Deployment"
									},
									"linkedServiceName": {
										"referenceName": "ls_adb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Get Metadata",
						"description": "Get information about the dataset to check if there is any content",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "TestPipeline",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Metadata').output.childItems,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Posts_copy1",
									"description": "Delete posts from Posts directoory",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_Posts_load_wcdblob_to_myblob",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "ls_my_blob_strg",
												"type": "LinkedServiceReference"
											},
											"path": "bd-project/Landing/DailyDeletesLog"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FilesCopied": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "adf-pipeliens"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TestPipeline')]",
				"[concat(variables('factoryId'), '/datasets/ds_Posts_load_wcdblob_to_myblob')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob_strg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestPipeline')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_my_blob_strg",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adf-datasets"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Landing/Test",
						"container": "bd-project"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "AcceptedAnswerId",
						"type": "INT32"
					},
					{
						"name": "AnswerCount",
						"type": "INT32"
					},
					{
						"name": "Body",
						"type": "UTF8"
					},
					{
						"name": "CommentCount",
						"type": "INT32"
					},
					{
						"name": "CreationDate",
						"type": "INT96"
					},
					{
						"name": "FavoriteCount",
						"type": "INT32"
					},
					{
						"name": "LastEditDate",
						"type": "INT96"
					},
					{
						"name": "LastEditorDisplayName",
						"type": "UTF8"
					},
					{
						"name": "LastEditorUserId",
						"type": "INT32"
					},
					{
						"name": "OwnerUserId",
						"type": "INT32"
					},
					{
						"name": "ParentId",
						"type": "INT32"
					},
					{
						"name": "PostTypeId",
						"type": "INT32"
					},
					{
						"name": "Score",
						"type": "FLOAT"
					},
					{
						"name": "Tags",
						"type": "UTF8"
					},
					{
						"name": "Title",
						"type": "UTF8"
					},
					{
						"name": "ViewCount",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob_strg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Posts_load_wcdblob_to_myblob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_my_blob_strg",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adf-datasets"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Landing/Posts",
						"container": "bd-project"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob_strg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Posts_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_wcd_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adf-datasets"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Posts_today",
						"container": "de-project-st"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_wcd_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Users')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Users table from RDS PostgreSQL DB",
				"linkedServiceName": {
					"referenceName": "ls_rds_pg",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adf-datasets"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "raw_st",
					"table": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_rds_pg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Users_load_rds_to_myblob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_my_blob_strg",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adf-datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rds-Users.csv",
						"folderPath": "Landing/Users",
						"container": "bd-project"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob_strg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_postTypes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "PostTypes table from RDS PostgreSQL DB",
				"linkedServiceName": {
					"referenceName": "ls_rds_pg",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adf-datasets"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "raw_st",
					"table": "posttypes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_rds_pg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_postTypes_load_rds_to_myblob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_my_blob_strg",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "adf-datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rds-postTypes.csv",
						"folderPath": "Landing/PostTypes",
						"container": "bd-project"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_my_blob_strg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "A linked service to connect Azure data factory to Azure databricks",
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1412098956733792.12.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "AzDatabrickTkn"
					},
					"existingClusterId": "[parameters('ls_adb_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_my_blob_strg')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service to connect to the owned blob storage",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_my_blob_strg_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "StrgAccAccessKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_rds_pg')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service for PostgreSQL DB",
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('ls_rds_pg_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('ls_rds_pg_properties_typeProperties_database')]",
					"username": "[parameters('ls_rds_pg_properties_typeProperties_username')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "PostgreSqlPassword"
					},
					"sslMode": 2,
					"authenticationType": "Basic"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_wcd_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service to connect to WCD blob storage",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_wcd_blob_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "WCDBlobStrgKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunCopyOnceWeekPipeline')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Schedule running the copyOnceWeek pipeline every week",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "copyOnceWeek",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2024-05-06T09:46:00",
						"timeZone": "Arab Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							],
							"weekDays": [
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copyOnceWeek')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunCopyPostsDailyPipeline')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Schedule running the copyPostsDaily pipeline every day",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "copyPostsDaily",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-05-06T09:44:00",
						"timeZone": "Arab Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copyPostsDaily')]"
			]
		}
	]
}