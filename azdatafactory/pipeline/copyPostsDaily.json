{
	"name": "copyPostsDaily",
	"properties": {
		"description": "Copy Posts parquet files daily from an external Azure blob storage container",
		"activities": [
			{
				"name": "Retry Loop",
				"description": "Executes a set of activities in a loop for a specific duration.",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Check If Files Exist",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@variables('FilesCopied')",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Copy Posts Conditional Action",
							"description": "Make an action depending on post files existence",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Copy Posts",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(activity('Copy Posts').output.filesWritten, 0)",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Set FilesCopied",
										"description": "Set the pipeline variable to true indicating successful copy attempt",
										"type": "SetVariable",
										"dependsOn": [],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "FilesCopied",
											"value": {
												"value": "@bool(true)",
												"type": "Expression"
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Retry WaitTime",
										"description": "Set the time till the next copy retry attempt",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": 1800
										}
									}
								]
							}
						},
						{
							"name": "Copy Posts",
							"description": "Copy posts from an external Azure blob storage",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ParquetSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"wildcardFileName": "*.parquet",
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "ParquetReadSettings"
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ds_Posts_parquet",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "ds_Posts_load_wcdblob_to_myblob",
									"type": "DatasetReference"
								}
							]
						}
					],
					"timeout": "0.01:00:00"
				}
			},
			{
				"name": "Check FilesCopied",
				"description": "Check if files are not copied at this point, then trigger a fail activity if so. Otherwise, run the Databricks notebook",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Retry Loop",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@variables('FilesCopied')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Copy Files Failure",
							"description": "A fail activity associated with the status of copying files from source",
							"type": "Fail",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"message": "Post files were not copied from source",
								"errorCode": "CopyError"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "ML Post Classification",
							"description": "An Azure Databricks notebook to classify post tags with a logistic regression model",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Repos/turki.alahmadi@uzh.ch/WCD-AzureCapstoneProject/databricks/5_Model_Prediction"
							},
							"linkedServiceName": {
								"referenceName": "ls_adb",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Get Metadata",
				"description": "Get information about the dataset to check if there is any content",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_Posts_load_wcdblob_to_myblob",
						"type": "DatasetReference"
					},
					"fieldList": [
						"childItems",
						"exists"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "ParquetReadSettings"
					}
				}
			},
			{
				"name": "Check If Files Exist",
				"description": "An if condition activity that helps in deleting files only if the exist",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@bool(activity('Get Metadata').output.exists)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Delete Posts",
							"description": "Delete posts from Posts directoory",
							"type": "Delete",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "ds_Posts_load_wcdblob_to_myblob",
									"type": "DatasetReference"
								},
								"logStorageSettings": {
									"linkedServiceName": {
										"referenceName": "ls_my_blob_strg",
										"type": "LinkedServiceReference"
									},
									"path": "bd-project/Landing/DailyDeletesLog"
								},
								"enableLogging": true,
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							}
						}
					]
				}
			}
		],
		"variables": {
			"FilesCopied": {
				"type": "Boolean",
				"defaultValue": false
			}
		},
		"folder": {
			"name": "adf-pipeliens"
		},
		"annotations": []
	}
}